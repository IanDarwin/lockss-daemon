##################################################
# file: AuControlServiceImplService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py /home/wkwilson/Desktop/AuControlService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://control.ws.lockss.org/
##############################

class ns0:
    targetNamespace = "http://control.ws.lockss.org/"

    class requestDeepCrawlByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestDeepCrawlByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestDeepCrawlByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="refetchDepth", aname="_refetchDepth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    self._refetchDepth = None
                    self._priority = None
                    self._force = None
                    return
            Holder.__name__ = "requestDeepCrawlByIdList_Holder"
            self.pyclass = Holder

    class requestDeepCrawlByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestDeepCrawlByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestDeepCrawlByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestDeepCrawlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "requestDeepCrawlByIdListResponse_Holder"
            self.pyclass = Holder

    class requestDeepCrawlResult_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestDeepCrawlResult")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns0.requestDeepCrawlResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="refetchDepth", aname="_refetchDepth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns0.requestCrawlResult_Def not in ns0.requestDeepCrawlResult_Def.__bases__:
                bases = list(ns0.requestDeepCrawlResult_Def.__bases__)
                bases.insert(0, ns0.requestCrawlResult_Def)
                ns0.requestDeepCrawlResult_Def.__bases__ = tuple(bases)

            ns0.requestCrawlResult_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class requestCrawlResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestCrawlResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestCrawlResult_Def.schema
            TClist = [ZSI.TC.String(pname="delayReason", aname="_delayReason", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="errorMessage", aname="_errorMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="success", aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._delayReason = None
                    self._errorMessage = None
                    self._id = None
                    self._success = None
                    return
            Holder.__name__ = "requestCrawlResult_Holder"
            self.pyclass = Holder

    class lockssWebServicesFaultInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "lockssWebServicesFaultInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lockssWebServicesFaultInfo_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "lockssWebServicesFaultInfo_Holder"
            self.pyclass = Holder

    class checkSubstanceById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "checkSubstanceById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkSubstanceById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    return
            Holder.__name__ = "checkSubstanceById_Holder"
            self.pyclass = Holder

    class checkSubstanceByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "checkSubstanceByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkSubstanceByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","checkSubstanceResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "checkSubstanceByIdResponse_Holder"
            self.pyclass = Holder

    class checkSubstanceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "checkSubstanceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkSubstanceResult_Def.schema
            TClist = [ZSI.TC.String(pname="errorMessage", aname="_errorMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://control.ws.lockss.org/","state",lazy=False)(pname="newState", aname="_newState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://control.ws.lockss.org/","state",lazy=False)(pname="oldState", aname="_oldState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorMessage = None
                    self._id = None
                    self._newState = None
                    self._oldState = None
                    return
            Holder.__name__ = "checkSubstanceResult_Holder"
            self.pyclass = Holder

    class requestMdIndexingById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestMdIndexingById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestMdIndexingById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    self._force = None
                    return
            Holder.__name__ = "requestMdIndexingById_Holder"
            self.pyclass = Holder

    class requestMdIndexingByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestMdIndexingByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestMdIndexingByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "requestMdIndexingByIdResponse_Holder"
            self.pyclass = Holder

    class requestAuControlResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestAuControlResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestAuControlResult_Def.schema
            TClist = [ZSI.TC.String(pname="errorMessage", aname="_errorMessage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="success", aname="_success", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._errorMessage = None
                    self._id = None
                    self._success = None
                    return
            Holder.__name__ = "requestAuControlResult_Holder"
            self.pyclass = Holder

    class requestDeepCrawlById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestDeepCrawlById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestDeepCrawlById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="refetchDepth", aname="_refetchDepth", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="priority", aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    self._refetchDepth = None
                    self._priority = None
                    self._force = None
                    return
            Holder.__name__ = "requestDeepCrawlById_Holder"
            self.pyclass = Holder

    class requestDeepCrawlByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestDeepCrawlByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestDeepCrawlByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestDeepCrawlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "requestDeepCrawlByIdResponse_Holder"
            self.pyclass = Holder

    class requestPollById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestPollById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestPollById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    return
            Holder.__name__ = "requestPollById_Holder"
            self.pyclass = Holder

    class requestPollByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestPollByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestPollByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "requestPollByIdResponse_Holder"
            self.pyclass = Holder

    class enableMdIndexingById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "enableMdIndexingById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.enableMdIndexingById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    return
            Holder.__name__ = "enableMdIndexingById_Holder"
            self.pyclass = Holder

    class enableMdIndexingByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "enableMdIndexingByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.enableMdIndexingByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "enableMdIndexingByIdResponse_Holder"
            self.pyclass = Holder

    class disableMdIndexingById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "disableMdIndexingById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disableMdIndexingById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    return
            Holder.__name__ = "disableMdIndexingById_Holder"
            self.pyclass = Holder

    class disableMdIndexingByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "disableMdIndexingByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disableMdIndexingByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "disableMdIndexingByIdResponse_Holder"
            self.pyclass = Holder

    class enableMdIndexingByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "enableMdIndexingByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.enableMdIndexingByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    return
            Holder.__name__ = "enableMdIndexingByIdList_Holder"
            self.pyclass = Holder

    class enableMdIndexingByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "enableMdIndexingByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.enableMdIndexingByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "enableMdIndexingByIdListResponse_Holder"
            self.pyclass = Holder

    class disableMdIndexingByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "disableMdIndexingByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disableMdIndexingByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    return
            Holder.__name__ = "disableMdIndexingByIdList_Holder"
            self.pyclass = Holder

    class disableMdIndexingByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "disableMdIndexingByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disableMdIndexingByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "disableMdIndexingByIdListResponse_Holder"
            self.pyclass = Holder

    class requestMdIndexingByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestMdIndexingByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestMdIndexingByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    self._force = None
                    return
            Holder.__name__ = "requestMdIndexingByIdList_Holder"
            self.pyclass = Holder

    class requestMdIndexingByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestMdIndexingByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestMdIndexingByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "requestMdIndexingByIdListResponse_Holder"
            self.pyclass = Holder

    class checkSubstanceByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "checkSubstanceByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkSubstanceByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    return
            Holder.__name__ = "checkSubstanceByIdList_Holder"
            self.pyclass = Holder

    class checkSubstanceByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "checkSubstanceByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.checkSubstanceByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","checkSubstanceResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "checkSubstanceByIdListResponse_Holder"
            self.pyclass = Holder

    class requestCrawlById_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestCrawlById")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestCrawlById_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    self._priority = None
                    self._force = None
                    return
            Holder.__name__ = "requestCrawlById_Holder"
            self.pyclass = Holder

    class requestCrawlByIdResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestCrawlByIdResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestCrawlByIdResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestCrawlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "requestCrawlByIdResponse_Holder"
            self.pyclass = Holder

    class requestPollByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestPollByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestPollByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    return
            Holder.__name__ = "requestPollByIdList_Holder"
            self.pyclass = Holder

    class requestPollByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestPollByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestPollByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestAuControlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "requestPollByIdListResponse_Holder"
            self.pyclass = Holder

    class requestCrawlByIdList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestCrawlByIdList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestCrawlByIdList_Def.schema
            TClist = [ZSI.TC.String(pname="auIds", aname="_auIds", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auIds = []
                    self._priority = None
                    self._force = None
                    return
            Holder.__name__ = "requestCrawlByIdList_Holder"
            self.pyclass = Holder

    class requestCrawlByIdListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "requestCrawlByIdListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestCrawlByIdListResponse_Def.schema
            TClist = [GTD("http://control.ws.lockss.org/","requestCrawlResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
		__metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "requestCrawlByIdListResponse_Holder"
            self.pyclass = Holder

    class state_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://control.ws.lockss.org/"
        type = (schema, "state")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
		__metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class checkSubstanceById_Dec(ElementDeclaration):
        literal = "checkSubstanceById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","checkSubstanceById")
            kw["aname"] = "_checkSubstanceById"
            if ns0.checkSubstanceById_Def not in ns0.checkSubstanceById_Dec.__bases__:
                bases = list(ns0.checkSubstanceById_Dec.__bases__)
                bases.insert(0, ns0.checkSubstanceById_Def)
                ns0.checkSubstanceById_Dec.__bases__ = tuple(bases)

            ns0.checkSubstanceById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkSubstanceById_Dec_Holder"

    class checkSubstanceByIdList_Dec(ElementDeclaration):
        literal = "checkSubstanceByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","checkSubstanceByIdList")
            kw["aname"] = "_checkSubstanceByIdList"
            if ns0.checkSubstanceByIdList_Def not in ns0.checkSubstanceByIdList_Dec.__bases__:
                bases = list(ns0.checkSubstanceByIdList_Dec.__bases__)
                bases.insert(0, ns0.checkSubstanceByIdList_Def)
                ns0.checkSubstanceByIdList_Dec.__bases__ = tuple(bases)

            ns0.checkSubstanceByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkSubstanceByIdList_Dec_Holder"

    class checkSubstanceByIdListResponse_Dec(ElementDeclaration):
        literal = "checkSubstanceByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","checkSubstanceByIdListResponse")
            kw["aname"] = "_checkSubstanceByIdListResponse"
            if ns0.checkSubstanceByIdListResponse_Def not in ns0.checkSubstanceByIdListResponse_Dec.__bases__:
                bases = list(ns0.checkSubstanceByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.checkSubstanceByIdListResponse_Def)
                ns0.checkSubstanceByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.checkSubstanceByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkSubstanceByIdListResponse_Dec_Holder"

    class checkSubstanceByIdResponse_Dec(ElementDeclaration):
        literal = "checkSubstanceByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","checkSubstanceByIdResponse")
            kw["aname"] = "_checkSubstanceByIdResponse"
            if ns0.checkSubstanceByIdResponse_Def not in ns0.checkSubstanceByIdResponse_Dec.__bases__:
                bases = list(ns0.checkSubstanceByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.checkSubstanceByIdResponse_Def)
                ns0.checkSubstanceByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.checkSubstanceByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "checkSubstanceByIdResponse_Dec_Holder"

    class disableMdIndexingById_Dec(ElementDeclaration):
        literal = "disableMdIndexingById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","disableMdIndexingById")
            kw["aname"] = "_disableMdIndexingById"
            if ns0.disableMdIndexingById_Def not in ns0.disableMdIndexingById_Dec.__bases__:
                bases = list(ns0.disableMdIndexingById_Dec.__bases__)
                bases.insert(0, ns0.disableMdIndexingById_Def)
                ns0.disableMdIndexingById_Dec.__bases__ = tuple(bases)

            ns0.disableMdIndexingById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableMdIndexingById_Dec_Holder"

    class disableMdIndexingByIdList_Dec(ElementDeclaration):
        literal = "disableMdIndexingByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","disableMdIndexingByIdList")
            kw["aname"] = "_disableMdIndexingByIdList"
            if ns0.disableMdIndexingByIdList_Def not in ns0.disableMdIndexingByIdList_Dec.__bases__:
                bases = list(ns0.disableMdIndexingByIdList_Dec.__bases__)
                bases.insert(0, ns0.disableMdIndexingByIdList_Def)
                ns0.disableMdIndexingByIdList_Dec.__bases__ = tuple(bases)

            ns0.disableMdIndexingByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableMdIndexingByIdList_Dec_Holder"

    class disableMdIndexingByIdListResponse_Dec(ElementDeclaration):
        literal = "disableMdIndexingByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","disableMdIndexingByIdListResponse")
            kw["aname"] = "_disableMdIndexingByIdListResponse"
            if ns0.disableMdIndexingByIdListResponse_Def not in ns0.disableMdIndexingByIdListResponse_Dec.__bases__:
                bases = list(ns0.disableMdIndexingByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.disableMdIndexingByIdListResponse_Def)
                ns0.disableMdIndexingByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.disableMdIndexingByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableMdIndexingByIdListResponse_Dec_Holder"

    class disableMdIndexingByIdResponse_Dec(ElementDeclaration):
        literal = "disableMdIndexingByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","disableMdIndexingByIdResponse")
            kw["aname"] = "_disableMdIndexingByIdResponse"
            if ns0.disableMdIndexingByIdResponse_Def not in ns0.disableMdIndexingByIdResponse_Dec.__bases__:
                bases = list(ns0.disableMdIndexingByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.disableMdIndexingByIdResponse_Def)
                ns0.disableMdIndexingByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.disableMdIndexingByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "disableMdIndexingByIdResponse_Dec_Holder"

    class enableMdIndexingById_Dec(ElementDeclaration):
        literal = "enableMdIndexingById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","enableMdIndexingById")
            kw["aname"] = "_enableMdIndexingById"
            if ns0.enableMdIndexingById_Def not in ns0.enableMdIndexingById_Dec.__bases__:
                bases = list(ns0.enableMdIndexingById_Dec.__bases__)
                bases.insert(0, ns0.enableMdIndexingById_Def)
                ns0.enableMdIndexingById_Dec.__bases__ = tuple(bases)

            ns0.enableMdIndexingById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "enableMdIndexingById_Dec_Holder"

    class enableMdIndexingByIdList_Dec(ElementDeclaration):
        literal = "enableMdIndexingByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","enableMdIndexingByIdList")
            kw["aname"] = "_enableMdIndexingByIdList"
            if ns0.enableMdIndexingByIdList_Def not in ns0.enableMdIndexingByIdList_Dec.__bases__:
                bases = list(ns0.enableMdIndexingByIdList_Dec.__bases__)
                bases.insert(0, ns0.enableMdIndexingByIdList_Def)
                ns0.enableMdIndexingByIdList_Dec.__bases__ = tuple(bases)

            ns0.enableMdIndexingByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "enableMdIndexingByIdList_Dec_Holder"

    class enableMdIndexingByIdListResponse_Dec(ElementDeclaration):
        literal = "enableMdIndexingByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","enableMdIndexingByIdListResponse")
            kw["aname"] = "_enableMdIndexingByIdListResponse"
            if ns0.enableMdIndexingByIdListResponse_Def not in ns0.enableMdIndexingByIdListResponse_Dec.__bases__:
                bases = list(ns0.enableMdIndexingByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.enableMdIndexingByIdListResponse_Def)
                ns0.enableMdIndexingByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.enableMdIndexingByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "enableMdIndexingByIdListResponse_Dec_Holder"

    class enableMdIndexingByIdResponse_Dec(ElementDeclaration):
        literal = "enableMdIndexingByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","enableMdIndexingByIdResponse")
            kw["aname"] = "_enableMdIndexingByIdResponse"
            if ns0.enableMdIndexingByIdResponse_Def not in ns0.enableMdIndexingByIdResponse_Dec.__bases__:
                bases = list(ns0.enableMdIndexingByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.enableMdIndexingByIdResponse_Def)
                ns0.enableMdIndexingByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.enableMdIndexingByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "enableMdIndexingByIdResponse_Dec_Holder"

    class requestCrawlById_Dec(ElementDeclaration):
        literal = "requestCrawlById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestCrawlById")
            kw["aname"] = "_requestCrawlById"
            if ns0.requestCrawlById_Def not in ns0.requestCrawlById_Dec.__bases__:
                bases = list(ns0.requestCrawlById_Dec.__bases__)
                bases.insert(0, ns0.requestCrawlById_Def)
                ns0.requestCrawlById_Dec.__bases__ = tuple(bases)

            ns0.requestCrawlById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestCrawlById_Dec_Holder"

    class requestCrawlByIdList_Dec(ElementDeclaration):
        literal = "requestCrawlByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestCrawlByIdList")
            kw["aname"] = "_requestCrawlByIdList"
            if ns0.requestCrawlByIdList_Def not in ns0.requestCrawlByIdList_Dec.__bases__:
                bases = list(ns0.requestCrawlByIdList_Dec.__bases__)
                bases.insert(0, ns0.requestCrawlByIdList_Def)
                ns0.requestCrawlByIdList_Dec.__bases__ = tuple(bases)

            ns0.requestCrawlByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestCrawlByIdList_Dec_Holder"

    class requestCrawlByIdListResponse_Dec(ElementDeclaration):
        literal = "requestCrawlByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestCrawlByIdListResponse")
            kw["aname"] = "_requestCrawlByIdListResponse"
            if ns0.requestCrawlByIdListResponse_Def not in ns0.requestCrawlByIdListResponse_Dec.__bases__:
                bases = list(ns0.requestCrawlByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.requestCrawlByIdListResponse_Def)
                ns0.requestCrawlByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.requestCrawlByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestCrawlByIdListResponse_Dec_Holder"

    class requestCrawlByIdResponse_Dec(ElementDeclaration):
        literal = "requestCrawlByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestCrawlByIdResponse")
            kw["aname"] = "_requestCrawlByIdResponse"
            if ns0.requestCrawlByIdResponse_Def not in ns0.requestCrawlByIdResponse_Dec.__bases__:
                bases = list(ns0.requestCrawlByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.requestCrawlByIdResponse_Def)
                ns0.requestCrawlByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.requestCrawlByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestCrawlByIdResponse_Dec_Holder"

    class requestDeepCrawlById_Dec(ElementDeclaration):
        literal = "requestDeepCrawlById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestDeepCrawlById")
            kw["aname"] = "_requestDeepCrawlById"
            if ns0.requestDeepCrawlById_Def not in ns0.requestDeepCrawlById_Dec.__bases__:
                bases = list(ns0.requestDeepCrawlById_Dec.__bases__)
                bases.insert(0, ns0.requestDeepCrawlById_Def)
                ns0.requestDeepCrawlById_Dec.__bases__ = tuple(bases)

            ns0.requestDeepCrawlById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestDeepCrawlById_Dec_Holder"

    class requestDeepCrawlByIdList_Dec(ElementDeclaration):
        literal = "requestDeepCrawlByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestDeepCrawlByIdList")
            kw["aname"] = "_requestDeepCrawlByIdList"
            if ns0.requestDeepCrawlByIdList_Def not in ns0.requestDeepCrawlByIdList_Dec.__bases__:
                bases = list(ns0.requestDeepCrawlByIdList_Dec.__bases__)
                bases.insert(0, ns0.requestDeepCrawlByIdList_Def)
                ns0.requestDeepCrawlByIdList_Dec.__bases__ = tuple(bases)

            ns0.requestDeepCrawlByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestDeepCrawlByIdList_Dec_Holder"

    class requestDeepCrawlByIdListResponse_Dec(ElementDeclaration):
        literal = "requestDeepCrawlByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestDeepCrawlByIdListResponse")
            kw["aname"] = "_requestDeepCrawlByIdListResponse"
            if ns0.requestDeepCrawlByIdListResponse_Def not in ns0.requestDeepCrawlByIdListResponse_Dec.__bases__:
                bases = list(ns0.requestDeepCrawlByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.requestDeepCrawlByIdListResponse_Def)
                ns0.requestDeepCrawlByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.requestDeepCrawlByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestDeepCrawlByIdListResponse_Dec_Holder"

    class requestDeepCrawlByIdResponse_Dec(ElementDeclaration):
        literal = "requestDeepCrawlByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestDeepCrawlByIdResponse")
            kw["aname"] = "_requestDeepCrawlByIdResponse"
            if ns0.requestDeepCrawlByIdResponse_Def not in ns0.requestDeepCrawlByIdResponse_Dec.__bases__:
                bases = list(ns0.requestDeepCrawlByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.requestDeepCrawlByIdResponse_Def)
                ns0.requestDeepCrawlByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.requestDeepCrawlByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestDeepCrawlByIdResponse_Dec_Holder"

    class requestMdIndexingById_Dec(ElementDeclaration):
        literal = "requestMdIndexingById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestMdIndexingById")
            kw["aname"] = "_requestMdIndexingById"
            if ns0.requestMdIndexingById_Def not in ns0.requestMdIndexingById_Dec.__bases__:
                bases = list(ns0.requestMdIndexingById_Dec.__bases__)
                bases.insert(0, ns0.requestMdIndexingById_Def)
                ns0.requestMdIndexingById_Dec.__bases__ = tuple(bases)

            ns0.requestMdIndexingById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestMdIndexingById_Dec_Holder"

    class requestMdIndexingByIdList_Dec(ElementDeclaration):
        literal = "requestMdIndexingByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestMdIndexingByIdList")
            kw["aname"] = "_requestMdIndexingByIdList"
            if ns0.requestMdIndexingByIdList_Def not in ns0.requestMdIndexingByIdList_Dec.__bases__:
                bases = list(ns0.requestMdIndexingByIdList_Dec.__bases__)
                bases.insert(0, ns0.requestMdIndexingByIdList_Def)
                ns0.requestMdIndexingByIdList_Dec.__bases__ = tuple(bases)

            ns0.requestMdIndexingByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestMdIndexingByIdList_Dec_Holder"

    class requestMdIndexingByIdListResponse_Dec(ElementDeclaration):
        literal = "requestMdIndexingByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestMdIndexingByIdListResponse")
            kw["aname"] = "_requestMdIndexingByIdListResponse"
            if ns0.requestMdIndexingByIdListResponse_Def not in ns0.requestMdIndexingByIdListResponse_Dec.__bases__:
                bases = list(ns0.requestMdIndexingByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.requestMdIndexingByIdListResponse_Def)
                ns0.requestMdIndexingByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.requestMdIndexingByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestMdIndexingByIdListResponse_Dec_Holder"

    class requestMdIndexingByIdResponse_Dec(ElementDeclaration):
        literal = "requestMdIndexingByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestMdIndexingByIdResponse")
            kw["aname"] = "_requestMdIndexingByIdResponse"
            if ns0.requestMdIndexingByIdResponse_Def not in ns0.requestMdIndexingByIdResponse_Dec.__bases__:
                bases = list(ns0.requestMdIndexingByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.requestMdIndexingByIdResponse_Def)
                ns0.requestMdIndexingByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.requestMdIndexingByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestMdIndexingByIdResponse_Dec_Holder"

    class requestPollById_Dec(ElementDeclaration):
        literal = "requestPollById"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestPollById")
            kw["aname"] = "_requestPollById"
            if ns0.requestPollById_Def not in ns0.requestPollById_Dec.__bases__:
                bases = list(ns0.requestPollById_Dec.__bases__)
                bases.insert(0, ns0.requestPollById_Def)
                ns0.requestPollById_Dec.__bases__ = tuple(bases)

            ns0.requestPollById_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestPollById_Dec_Holder"

    class requestPollByIdList_Dec(ElementDeclaration):
        literal = "requestPollByIdList"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestPollByIdList")
            kw["aname"] = "_requestPollByIdList"
            if ns0.requestPollByIdList_Def not in ns0.requestPollByIdList_Dec.__bases__:
                bases = list(ns0.requestPollByIdList_Dec.__bases__)
                bases.insert(0, ns0.requestPollByIdList_Def)
                ns0.requestPollByIdList_Dec.__bases__ = tuple(bases)

            ns0.requestPollByIdList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestPollByIdList_Dec_Holder"

    class requestPollByIdListResponse_Dec(ElementDeclaration):
        literal = "requestPollByIdListResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestPollByIdListResponse")
            kw["aname"] = "_requestPollByIdListResponse"
            if ns0.requestPollByIdListResponse_Def not in ns0.requestPollByIdListResponse_Dec.__bases__:
                bases = list(ns0.requestPollByIdListResponse_Dec.__bases__)
                bases.insert(0, ns0.requestPollByIdListResponse_Def)
                ns0.requestPollByIdListResponse_Dec.__bases__ = tuple(bases)

            ns0.requestPollByIdListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestPollByIdListResponse_Dec_Holder"

    class requestPollByIdResponse_Dec(ElementDeclaration):
        literal = "requestPollByIdResponse"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","requestPollByIdResponse")
            kw["aname"] = "_requestPollByIdResponse"
            if ns0.requestPollByIdResponse_Def not in ns0.requestPollByIdResponse_Dec.__bases__:
                bases = list(ns0.requestPollByIdResponse_Dec.__bases__)
                bases.insert(0, ns0.requestPollByIdResponse_Def)
                ns0.requestPollByIdResponse_Dec.__bases__ = tuple(bases)

            ns0.requestPollByIdResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "requestPollByIdResponse_Dec_Holder"

    class LockssWebServicesFault_Dec(ElementDeclaration):
        literal = "LockssWebServicesFault"
        schema = "http://control.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://control.ws.lockss.org/","LockssWebServicesFault")
            kw["aname"] = "_LockssWebServicesFault"
            if ns0.lockssWebServicesFaultInfo_Def not in ns0.LockssWebServicesFault_Dec.__bases__:
                bases = list(ns0.LockssWebServicesFault_Dec.__bases__)
                bases.insert(0, ns0.lockssWebServicesFaultInfo_Def)
                ns0.LockssWebServicesFault_Dec.__bases__ = tuple(bases)

            ns0.lockssWebServicesFaultInfo_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "LockssWebServicesFault_Dec_Holder"

# end class ns0 (tns: http://control.ws.lockss.org/)
