##################################################
# file: AuControlServiceImplService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py /home/wkwilson/Desktop/AuControlService.wsdl
# 
##################################################

from AuControlServiceImplService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class AuControlServiceImplServiceLocator:
    AuControlServiceImplPort_address = "http://localhost:8081/ws/AuControlService"
    def getAuControlServiceImplPortAddress(self):
        return AuControlServiceImplServiceLocator.AuControlServiceImplPort_address
    def getAuControlServiceImplPort(self, url=None, **kw):
        return AuControlServiceImplServiceSoapBindingSOAP(url or AuControlServiceImplServiceLocator.AuControlServiceImplPort_address, **kw)

# Methods
class AuControlServiceImplServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: requestDeepCrawlByIdList
    def requestDeepCrawlByIdList(self, request, **kw):
        if isinstance(request, requestDeepCrawlByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestDeepCrawlByIdListResponse.typecode)
        return response

    # op: checkSubstanceById
    def checkSubstanceById(self, request, **kw):
        if isinstance(request, checkSubstanceById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(checkSubstanceByIdResponse.typecode)
        return response

    # op: requestMdIndexingById
    def requestMdIndexingById(self, request, **kw):
        if isinstance(request, requestMdIndexingById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestMdIndexingByIdResponse.typecode)
        return response

    # op: requestPollById
    def requestPollById(self, request, **kw):
        if isinstance(request, requestPollById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestPollByIdResponse.typecode)
        return response

    # op: requestDeepCrawlById
    def requestDeepCrawlById(self, request, **kw):
        if isinstance(request, requestDeepCrawlById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestDeepCrawlByIdResponse.typecode)
        return response

    # op: enableMdIndexingById
    def enableMdIndexingById(self, request, **kw):
        if isinstance(request, enableMdIndexingById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(enableMdIndexingByIdResponse.typecode)
        return response

    # op: disableMdIndexingById
    def disableMdIndexingById(self, request, **kw):
        if isinstance(request, disableMdIndexingById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(disableMdIndexingByIdResponse.typecode)
        return response

    # op: enableMdIndexingByIdList
    def enableMdIndexingByIdList(self, request, **kw):
        if isinstance(request, enableMdIndexingByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(enableMdIndexingByIdListResponse.typecode)
        return response

    # op: disableMdIndexingByIdList
    def disableMdIndexingByIdList(self, request, **kw):
        if isinstance(request, disableMdIndexingByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(disableMdIndexingByIdListResponse.typecode)
        return response

    # op: requestMdIndexingByIdList
    def requestMdIndexingByIdList(self, request, **kw):
        if isinstance(request, requestMdIndexingByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestMdIndexingByIdListResponse.typecode)
        return response

    # op: checkSubstanceByIdList
    def checkSubstanceByIdList(self, request, **kw):
        if isinstance(request, checkSubstanceByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(checkSubstanceByIdListResponse.typecode)
        return response

    # op: requestCrawlById
    def requestCrawlById(self, request, **kw):
        if isinstance(request, requestCrawlById) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestCrawlByIdResponse.typecode)
        return response

    # op: requestPollByIdList
    def requestPollByIdList(self, request, **kw):
        if isinstance(request, requestPollByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestPollByIdListResponse.typecode)
        return response

    # op: requestCrawlByIdList
    def requestCrawlByIdList(self, request, **kw):
        if isinstance(request, requestCrawlByIdList) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(requestCrawlByIdListResponse.typecode)
        return response

requestDeepCrawlByIdList = GED("http://control.ws.lockss.org/", "requestDeepCrawlByIdList").pyclass

requestDeepCrawlByIdListResponse = GED("http://control.ws.lockss.org/", "requestDeepCrawlByIdListResponse").pyclass

checkSubstanceById = GED("http://control.ws.lockss.org/", "checkSubstanceById").pyclass

checkSubstanceByIdResponse = GED("http://control.ws.lockss.org/", "checkSubstanceByIdResponse").pyclass

requestMdIndexingById = GED("http://control.ws.lockss.org/", "requestMdIndexingById").pyclass

requestMdIndexingByIdResponse = GED("http://control.ws.lockss.org/", "requestMdIndexingByIdResponse").pyclass

requestPollById = GED("http://control.ws.lockss.org/", "requestPollById").pyclass

requestPollByIdResponse = GED("http://control.ws.lockss.org/", "requestPollByIdResponse").pyclass

requestDeepCrawlById = GED("http://control.ws.lockss.org/", "requestDeepCrawlById").pyclass

requestDeepCrawlByIdResponse = GED("http://control.ws.lockss.org/", "requestDeepCrawlByIdResponse").pyclass

enableMdIndexingById = GED("http://control.ws.lockss.org/", "enableMdIndexingById").pyclass

enableMdIndexingByIdResponse = GED("http://control.ws.lockss.org/", "enableMdIndexingByIdResponse").pyclass

disableMdIndexingById = GED("http://control.ws.lockss.org/", "disableMdIndexingById").pyclass

disableMdIndexingByIdResponse = GED("http://control.ws.lockss.org/", "disableMdIndexingByIdResponse").pyclass

enableMdIndexingByIdList = GED("http://control.ws.lockss.org/", "enableMdIndexingByIdList").pyclass

enableMdIndexingByIdListResponse = GED("http://control.ws.lockss.org/", "enableMdIndexingByIdListResponse").pyclass

disableMdIndexingByIdList = GED("http://control.ws.lockss.org/", "disableMdIndexingByIdList").pyclass

disableMdIndexingByIdListResponse = GED("http://control.ws.lockss.org/", "disableMdIndexingByIdListResponse").pyclass

requestMdIndexingByIdList = GED("http://control.ws.lockss.org/", "requestMdIndexingByIdList").pyclass

requestMdIndexingByIdListResponse = GED("http://control.ws.lockss.org/", "requestMdIndexingByIdListResponse").pyclass

checkSubstanceByIdList = GED("http://control.ws.lockss.org/", "checkSubstanceByIdList").pyclass

checkSubstanceByIdListResponse = GED("http://control.ws.lockss.org/", "checkSubstanceByIdListResponse").pyclass

requestCrawlById = GED("http://control.ws.lockss.org/", "requestCrawlById").pyclass

requestCrawlByIdResponse = GED("http://control.ws.lockss.org/", "requestCrawlByIdResponse").pyclass

requestPollByIdList = GED("http://control.ws.lockss.org/", "requestPollByIdList").pyclass

requestPollByIdListResponse = GED("http://control.ws.lockss.org/", "requestPollByIdListResponse").pyclass

requestCrawlByIdList = GED("http://control.ws.lockss.org/", "requestCrawlByIdList").pyclass

requestCrawlByIdListResponse = GED("http://control.ws.lockss.org/", "requestCrawlByIdListResponse").pyclass
